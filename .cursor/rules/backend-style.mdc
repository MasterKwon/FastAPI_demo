---
description: 
globs: 
alwaysApply: true
---
# FastAPI 백엔드 스타일 가이드 (한글 혼용)

## 🧠 기본 원칙 (Guiding Principles)

- 응답은 간결하고 기술적으로 작성합니다.
- 클래스(class)보다 함수 기반(functional, declarative) 스타일을 선호합니다.
- 중복을 피하고 반복(iteration) 및 모듈화(modularization)를 우선합니다.
- 변수명은 상태를 명확히 표현하는 조동사를 포함해 작성합니다 (예: `is_active`, `has_permission`).
- 디렉토리와 파일 이름은 소문자 + 언더스코어(`_`) 형식을 사용합니다 (예: `routers/user_routes.py`).
- 라우트와 유틸 함수는 *named export* 형태로 명시적으로 export합니다.
- 객체를 받고 객체를 반환하는 RORO(Receive an Object, Return an Object) 패턴을 따릅니다.

---

## 🐍 Python / FastAPI 스타일

- 순수 함수는 `def`, 비동기 작업에는 `async def`를 사용합니다.
- 모든 함수는 `type hint`를 명시적으로 작성합니다.
- 입력 검증은 딕셔너리 대신 `Pydantic v2` 모델을 사용합니다.
- 파일 구조는 다음과 같이 구성합니다:
  - 라우터(routers), 서브라우터(subroutes), 유틸리티(utilities), 정적 파일(static), 타입 정의(types/models/schemas)
- 조건문에는 불필요한 중괄호를 사용하지 않으며,
- 단순한 조건문은 한 줄로 작성합니다 (예: `if condition: do_something()`).

---

## 🚨 예외 처리 및 검증

- 함수 시작 부분에서 오류 및 엣지 케이스를 먼저 처리합니다 (early return).
- 중첩된 `if`를 피하고 `guard clause`를 적극 활용합니다.
- "정상 흐름(happy path)"은 항상 마지막에 배치합니다.
- `if` 블록 후에 `else`는 되도록 사용하지 않습니다.
- 사용자 친화적인 에러 메시지를 제공하며,
- 일관된 예외 처리를 위해 커스텀 에러 타입 또는 에러 팩토리(error factory)를 사용합니다.

---

## 📦 프로젝트 의존성

- ✅ 사용 권장: `fastapi`, `pydantic>=2`, `asyncpg`, `aiomysql`, `psycopg2-binary`
- ❌ 사용 금지: `SQLAlchemy` (직접 SQL 사용 선호)

---

## ⚙️ FastAPI 작성 규칙

- 입력과 출력을 위해 `BaseModel`을 사용하는 함수형 라우트를 작성합니다.
- 모든 라우트 함수는 `return type`을 명시합니다.
- `@app.on_event("startup")` 대신 `lifespan` 컨텍스트 매니저를 사용합니다.
- 로깅, 에러 모니터링, 성능 최적화는 *middleware*에서 처리합니다.
- 예상 가능한 에러는 `HTTPException`을 통해 명확하게 표현합니다.
- 외부 API 또는 DB 호출은 반드시 `async`로 처리합니다.
- `BaseModel`을 통한 직렬화/역직렬화를 일관되게 적용합니다.

---

## 🚀 성능 최적화 (Performance Tips)

- DB나 외부 API 호출은 반드시 비동기(async) 방식으로 처리합니다.
- Redis 또는 인메모리 캐싱을 통해 정적/자주 조회되는 데이터를 캐싱합니다.
- `Pydantic`을 효율적으로 활용하여 직렬화 속도를 최적화합니다.
- 데이터셋이 크거나 응답이 클 경우 lazy loading을 적용합니다.

---

## 🧱 아키텍처 가이드라인

1. FastAPI의 *Dependency Injection* 시스템을 활용해 상태나 리소스를 관리합니다.
2. API 성능 지표(응답 속도, 지연, 처리량)를 모니터링합니다.
3. 라우트 내에서는 블로킹 연산을 피합니다:
   - 비동기 처리를 우선합니다.
   - DB, 외부 API 연산은 별도 함수로 분리하여 관리합니다.
   - 라우트와 의존성 구성을 명확히 하여 가독성과 유지보수성을 확보합니다.

---

## 🗄️ 데이터베이스 스키마 관리

- 데이터베이스 스키마는 `database/schemas/*.sql` 파일에서 관리됩니다.
- SQL 파일은 직접 수정하지 않고 참조만 합니다.
- 새로운 모델 생성/수정 시:
  1. SQL 파일의 테이블 구조를 먼저 확인
  2. 해당 구조에 맞춰 Pydantic 모델 생성/수정
  3. 필요한 경우 모델에 대한 추가 설명 요청
- 테이블 구조 변경이 필요한 경우 먼저 논의 후 진행
- 모델과 실제 DB 스키마의 일관성 유지

---

## 📊 엑셀 데이터 처리

- 엑셀 파일 처리 시 컬럼명 대신 컬럼 순서를 기반으로 처리합니다.
- 컬럼 순서는 0부터 시작하는 인덱스를 사용합니다.
- 엑셀 파일의 구조가 변경될 경우 순서만 유지되면 코드 수정이 필요 없도록 설계합니다.
- 데이터 매핑은 명시적인 인덱스 기반으로 처리합니다.

예시:
```python
# 권장하는 방식
def process_excel_row(row: List[str]) -> Dict:
    return {
        "name": row[0],      # 첫 번째 컬럼
        "age": int(row[1]),  # 두 번째 컬럼
        "email": row[2]      # 세 번째 컬럼
    }

# 피해야 할 방식
def process_excel_row(row: Dict) -> Dict:
    return {
        "name": row["이름"],     # 컬럼명 직접 참조
        "age": int(row["나이"]), # 컬럼명 직접 참조
        "email": row["이메일"]   # 컬럼명 직접 참조
    }
```

---

📚 참고: [FastAPI 공식 문서](mdc:https:/fastapi.tiangolo.com)





